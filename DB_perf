Key Metrics to Monitor
1. Buffer Cache Hit Ratio
This tells you how often Oracle finds data in memory without needing disk access.

sql
SELECT 
  ROUND((1 - (phy.value - lob.value - dir.value) / ses.value) * 100, 2) AS "Buffer Cache Hit Ratio (%)"
FROM 
  v$sysstat ses,
  v$sysstat lob,
  v$sysstat dir,
  v$sysstat phy
WHERE 
  ses.name = 'session logical reads'
  AND lob.name = 'physical reads direct (lob)'
  AND dir.name = 'physical reads direct'
  AND phy.name = 'physical reads';

Ideal value: > 90%

Low ratio: May indicate poor SQL or insufficient cache size

2. V$DB_CACHE_ADVICE View
This advisory helps you simulate how changing the buffer cache size would affect physical reads.

sql
SELECT size_for_estimate, estd_physical_read_factor, estd_physical_reads
FROM   v$db_cache_advice
WHERE  name = 'DEFAULT' AND block_size = (SELECT value FROM v$parameter WHERE name = 'db_block_size');
Helps determine if increasing cache size will reduce I/O

Requires DB_CACHE_ADVICE to be set to ON

3. Buffer Busy Waits
Indicates contention in the buffer cache.

sql
SELECT event, total_waits, time_waited
FROM   v$system_event
WHERE  event LIKE 'buffer busy waits';
High values suggest hot blocks or poor object design

ðŸ§ª Advanced Views for Analysis
V$BUFFER_POOL_STATISTICS: Shows hit ratios per buffer pool

V$BH: Lists blocks currently in the buffer cache

DBA_HIST_BUFFER_POOL_STAT: Historical buffer pool stats (requires AWR)

=============================
What Is DBA_HIST_ACTIVE_SESS_HISTORY?
This view stores sampled session activity from the in-memory V$ACTIVE_SESSION_HISTORY, but persisted to disk via AWR snapshots. It captures:

Wait events

SQL IDs

Session states (CPU, I/O, locks, etc.)

Execution plans

Blocking sessions

Each row represents a 10-second sample of an active session.

ðŸ§ª How to Analyze It
1. Find Top Wait Events
sql
SELECT NVL(event, 'ON CPU') AS event,
       COUNT(*) * 10 AS total_seconds
FROM   dba_hist_active_sess_history
WHERE  sample_time BETWEEN SYSDATE - 1/24 AND SYSDATE  -- last 1 hour
GROUP BY event
ORDER BY total_seconds DESC;
This shows where your DB spent most of its time.

2. Identify Top SQL by Wait Time
sql
SELECT sql_id,
       COUNT(*) * 10 AS total_seconds
FROM   dba_hist_active_sess_history
WHERE  sample_time BETWEEN SYSDATE - 1/24 AND SYSDATE
GROUP BY sql_id
ORDER BY total_seconds DESC;
Use this to find the most resource-intensive SQLs.

3. Analyze Session States
sql
SELECT session_state,
       COUNT(*) * 10 AS total_seconds
FROM   dba_hist_active_sess_history
WHERE  sample_time BETWEEN SYSDATE - 1/24 AND SYSDATE
GROUP BY session_state;
This helps you understand how much time was spent waiting vs. on CPU.

4. Drill Down by Module or Program
sql
SELECT module,
       COUNT(*) * 10 AS total_seconds
FROM   dba_hist_active_sess_history
WHERE  sample_time BETWEEN SYSDATE - 1/24 AND SYSDATE
GROUP BY module
ORDER BY total_seconds DESC;
Useful for identifying problematic applications or jobs.

